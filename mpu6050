#!/usr/bin/python
# -*- coding: iso-8859-15 -*
# Importamos los modulos necesarios
import os
import smbus
import math
import time
import json
import httplib
 
# Register
power_mgmt_1 = 0x6b
power_mgmt_2 = 0x6c
 
def read_byte(reg):
    return bus.read_byte_data(address, reg)
 
def read_word(reg):
    h = bus.read_byte_data(address, reg)
    l = bus.read_byte_data(address, reg+1)
    value = (h << 8) + l
    return value
 
def read_word_2c(reg):
    val = read_word(reg)
    if (val >= 0x8000):
        return -((65535 - val) + 1)
    else:
        return val
 
def dist(a,b):
    return math.sqrt((a*a)+(b*b))
 
def get_y_rotation(x,y,z):
    radians = math.atan2(x, dist(y,z))
    return -math.degrees(radians)
 
def get_x_rotation(x,y,z):
    radians = math.atan2(y, dist(x,z))
    return math.degrees(radians)
 
bus = smbus.SMBus(1)
address = 0x68

# Leemos los datos del bus
bus.write_byte_data(address, power_mgmt_1, 0)


# Configuramos los parámetros de conexión con el Context Broker que se ha desplegado en un Docker
READ_TIME = 14
TCP_Buffer = 512
TCP_IP_ORION = '192.168.1.177'
TCP_Puerto_ORION = 1026
contador = True


# Realizamos la conexión con el Context Broker
orion_con = httplib.HTTPConnection(TCP_IP_ORION, TCP_Puerto_ORION)
headers = {"Content-type": "application/json", "Accept": "application/json"}
data = json.loads('{"id" : "GyroscopeAcelerometer", "type" : "GYRO", "X" : {"value" : 0, "type" : "Float"}, "Y" : {"value" : 0, "type" : "Float"}}')
# Creamos la entidad la primera vez
try:
 orion_con.request('POST', '/v2/entities', json.dumps(data), headers)
 resp = orion_con.getresponse()
 print resp.read()
 orion_con.close()
except Exception as e:
 print (e)

# Lectura de datos y envío al Context Broker
while (contador):
 orion_con = httplib.HTTPConnection(TCP_IP_ORION, TCP_Puerto_ORION)


 #print ("\n")
 #print ("*************Giroscopio*************")
 
 
 giroscopio_x = read_word_2c(0x43)
 giroscopio_y = read_word_2c(0x45)
 giroscopio_z = read_word_2c(0x47)
 
 #print ("giroscopio_x: ", ("%5d" % giroscopio_x), " escalado: ", (giroscopio_x / 131))
 #print ("giroscopio_y: ", ("%5d" % giroscopio_y), " escalado: ", (giroscopio_y / 131))
 #print ("giroscopio_z: ", ("%5d" % giroscopio_z), " escalado: ", (giroscopio_z / 131))
 
 #print ("\n")
 #print ("*************Acelerómetro*************")
 
 acelerometro_x = read_word_2c(0x3b)
 acelerometro_y = read_word_2c(0x3d)
 acelerometro_z = read_word_2c(0x3f)
 
 acelerometro_x_escalado = acelerometro_x / 16384.0
 acelerometro_y_escalado = acelerometro_y / 16384.0
 acelerometro_z_escalado = acelerometro_z / 16384.0
 
 #print ("acelerometro_x: ", ("%6d" % acelerometro_x), " escalado: ", acelerometro_x_escalado)
 #print ("acelerometro_y: ", ("%6d" % acelerometro_y), " escalado: ", acelerometro_y_escalado)
 #print ("acelerometro_z: ", ("%6d" % acelerometro_z), " escalado: ", acelerometro_z_escalado)
 print ("Resultado de la medición:")
 print ("- Rotación Eje X: " , get_x_rotation(acelerometro_x_escalado, acelerometro_y_escalado, acelerometro_z_escalado))
 print ("- Rotación Eje Y: " , get_y_rotation(acelerometro_x_escalado, acelerometro_y_escalado, acelerometro_z_escalado))

 valueX = get_x_rotation(acelerometro_x_escalado, acelerometro_y_escalado, acelerometro_z_escalado)
 valueY = get_y_rotation(acelerometro_x_escalado, acelerometro_y_escalado, acelerometro_z_escalado)

# Envío de datos al Context Broker mediante petición PUT
 data = json.loads('{"X" : {"value" : ' + str(valueX) + ', "type" : "Float"}, "Y" : {"value" : ' + str(valueY) + ', "type" : "Float"}}')
 headers = {"Content-type": "application/json", "Accept": "application/json"}
 orion_con.request("PUT", "/v2/entities/GyroscopeAcelerometer/attrs", json.dumps(data), headers)

 try:
     time.sleep(1)
     resp = orion_con.getresponse()
     print ("Context Broker: ", resp.status, resp.reason, resp.read())
     orion_con.close()
 except Exception as e:
     print (e)
     contador = False

 time.sleep(READ_TIME - 1)
 # Limpiamos el terminal para cada medición
 os.system('clear')
# Cerramos la conexión con el Context Broker
orion_con.close()